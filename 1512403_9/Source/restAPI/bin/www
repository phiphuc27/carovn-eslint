#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('restapi:server');
const http = require('http');
const socketIO = require('socket.io');

const shortid = require('shortid');
shortid.characters(
	'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$@'
);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = socketIO(server);

io.on('connection', socket => {
	console.log(`user ${socket.id} connected!`);
	socket.on('createGame', ({ user }) => {
		const room = shortid.generate();
		socket.join(`room-${room}`);
		console.log(`${room} is created.`);
		socket.emit('newGame', { user, room });
	});

	socket.on('joinGame', ({ user, roomId }) => {
		const room = `room-${roomId}`;
		const findRoom = io.nsps['/'].adapter.rooms[room];

		if (findRoom && findRoom.length === 1) {
			socket.join(room);
			socket.broadcast.to(room).emit('player1', { opponent: user });
			console.log(`user ${socket.id} join ${roomId}`);
			socket.emit('player2', { opponent: user, room: roomId });
		} else {
			socket.emit('error', { message: 'Sorry, the room is full!' });
		}
	});

	socket.on('sendInfoPlayer1', ({ user, roomId }) => {
		const room = `room-${roomId}`;
		socket.broadcast.to(room).emit('player2', { opponent: user, room: roomId });
	});

	socket.on('playTurn', ({ square, roomId, player }) => {
		const room = `room-${roomId}`;
		console.log(`player ${player.name} turn.`);
		socket.broadcast.to(room).emit('turnPlayed', { square, player });
	});

	socket.on('undo', ({ roomId, stepNumber, opponentUndo }) => {
		const room = `room-${roomId}`;
		console.log('start undo');
		socket.broadcast
			.to(room)
			.emit('opponentUndo', { stepNumber, opponentUndo });
	});

	socket.on('sendSurrenderAns', ({ message, winner, roomId }) => {
		const room = `room-${roomId}`;
		console.log(message);
		socket.broadcast.to(room).emit('getSurrenderAns', { message, winner });
	});

	socket.on('sendSuggestions', ({ modal, roomId }) => {
		const room = `room-${roomId}`;
		socket.broadcast.to(room).emit('getSuggestions', { modal });
	});

	socket.on('sendSuggestAns', ({ modal, roomId, message, answer }) => {
		const room = `room-${roomId}`;
		if (answer)
			socket.broadcast.to(room).emit('getAcceptAns', { modal, message });
		else socket.broadcast.to(room).emit('getDeclineAns', { modal, message });
	});

	socket.on('gameEnded', ({ roomId }) => {
		const room = `room-${roomId}`;
		socket.broadcast.to(room).emit('gameEnd', { room });
	});

	socket.on('disconnect', () => {
		console.log(`user ${socket.id} disconnected!`);
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log('Server is running on port ' + port));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
